// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_endpoints

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func EndpointsResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"endpoint_params": schema.ListAttribute{
				ElementType: types.Int64Type,
				Computed:    true,
			},
			"findings": schema.ListAttribute{
				ElementType: types.Int64Type,
				Computed:    true,
			},
			"fragment": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.",
				MarkdownDescription: "The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(500),
				},
			},
			"host": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The host name or IP address. It must not include the port number. For example '127.0.0.1', 'localhost', 'yourdomain.com'.",
				MarkdownDescription: "The host name or IP address. It must not include the port number. For example '127.0.0.1', 'localhost', 'yourdomain.com'.",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(500),
				},
			},
			"id": schema.Int64Attribute{
				Computed:            true,
				Description:         "A unique integer value identifying this endpoint.",
				MarkdownDescription: "A unique integer value identifying this endpoint.",
			},
			"path": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The location of the resource, it must not start with a '/'. For example endpoint/420/edit",
				MarkdownDescription: "The location of the resource, it must not start with a '/'. For example endpoint/420/edit",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(500),
				},
			},
			"port": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "The network port associated with the endpoint.",
				MarkdownDescription: "The network port associated with the endpoint.",
				Validators: []validator.Int64{
					int64validator.Between(-2147483648, 2147483647),
				},
			},
			"product": schema.Int64Attribute{
				Optional: true,
				Computed: true,
			},
			"protocol": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The communication protocol/scheme such as 'http', 'ftp', 'dns', etc.",
				MarkdownDescription: "The communication protocol/scheme such as 'http', 'ftp', 'dns', etc.",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(20),
				},
			},
			"query": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The query string, the question mark should be omitted.For example 'group=4&team=8'",
				MarkdownDescription: "The query string, the question mark should be omitted.For example 'group=4&team=8'",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1000),
				},
			},
			"tags": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"userinfo": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "User info as 'alice', 'bob', etc.",
				MarkdownDescription: "User info as 'alice', 'bob', etc.",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(500),
				},
			},
		},
	}
}

type EndpointsModel struct {
	EndpointParams types.List   `tfsdk:"endpoint_params"`
	Findings       types.List   `tfsdk:"findings"`
	Fragment       types.String `tfsdk:"fragment"`
	Host           types.String `tfsdk:"host"`
	Id             types.Int64  `tfsdk:"id"`
	Path           types.String `tfsdk:"path"`
	Port           types.Int64  `tfsdk:"port"`
	Product        types.Int64  `tfsdk:"product"`
	Protocol       types.String `tfsdk:"protocol"`
	Query          types.String `tfsdk:"query"`
	Tags           types.List   `tfsdk:"tags"`
	Userinfo       types.String `tfsdk:"userinfo"`
}
